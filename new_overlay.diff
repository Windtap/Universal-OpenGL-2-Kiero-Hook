diff --git a/app.cpp b/app.cpp
index 1111111..2222222 100644
--- a/app.cpp
+++ b/app.cpp
@@ -1,6 +1,7 @@
 #include "app.h"
 #include "imgui.h"
+#include <cmath>
 
 void App::Render()
 {
-    // Старое меню ImGui здесь
-    ImGui::Begin("Menu");
-    ImGui::Text("Hello, world!");
-    ImGui::End();
+    // ===== Новый дизайн меню =====
+    ImGuiStyle& style = ImGui::GetStyle();
+    style.WindowRounding = 10.0f;
+    style.FrameRounding  = 6.0f;
+    style.GrabRounding   = 6.0f;
+
+    ImGui::PushStyleColor(ImGuiCol_WindowBg, ImVec4(0.0f, 0.0f, 0.0f, 0.55f));
+    ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.3f, 0.3f, 0.3f, 0.7f));
+    ImGui::PushStyleColor(ImGuiCol_TitleBgActive, ImVec4(0.15f, 0.15f, 0.15f, 0.9f));
+    ImGui::PushStyleColor(ImGuiCol_CheckMark, ImVec4(0.2f, 0.7f, 1.0f, 1.0f));
+    ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.2f, 0.2f, 0.7f));
+    ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.9f, 0.2f, 0.8f, 1.0f));
+
+    ImGui::Begin("Leontap IPA Overlay", nullptr,
+        ImGuiWindowFlags_NoResize |
+        ImGuiWindowFlags_AlwaysAutoResize |
+        ImGuiWindowFlags_NoCollapse);
+
+    if (ImGui::BeginTabBar("Tabs")) {
+        if (ImGui::BeginTabItem("Visual")) {
+            static bool enableAll = true;
+            static bool espBox = true;
+            static int boxType = 0;
+            static float corner = 2.1f;
+            static float color[3] = {1.0f, 0.0f, 1.0f};
+
+            ImGui::Checkbox("Enable all", &enableAll);
+            ImGui::Checkbox("ESP Box", &espBox);
+
+            ImGui::Text("Box Type");
+            const char* boxTypes[] = { "Gradient", "Solid", "Outline" };
+            ImGui::Combo("##boxType", &boxType, boxTypes, IM_ARRAYSIZE(boxTypes));
+
+            ImGui::SliderFloat("Corner", &corner, 0.0f, 10.0f, "%.1f");
+
+            ImGui::ColorEdit3("Color", color);
+
+            // === Радужная полоса HSV ===
+            ImGui::Text("Rainbow Bar");
+            ImVec2 p = ImGui::GetCursorScreenPos();
+            float barHeight = 20.0f;
+            float barWidth = ImGui::GetContentRegionAvail().x;
+            ImDrawList* draw_list = ImGui::GetWindowDrawList();
+            int segments = 80;
+            for (int i = 0; i < segments; i++) {
+                float t1 = (float)i / (float)segments;
+                float t2 = (float)(i + 1) / (float)segments;
+                ImVec4 col1 = ImColor::HSV(t1, 1.0f, 1.0f);
+                ImVec4 col2 = ImColor::HSV(t2, 1.0f, 1.0f);
+                float x1 = p.x + t1 * barWidth;
+                float x2 = p.x + t2 * barWidth;
+                draw_list->AddRectFilledMultiColor(
+                    ImVec2(x1, p.y),
+                    ImVec2(x2, p.y + barHeight),
+                    ImGui::ColorConvertFloat4ToU32(col1),
+                    ImGui::ColorConvertFloat4ToU32(col2),
+                    ImGui::ColorConvertFloat4ToU32(col2),
+                    ImGui::ColorConvertFloat4ToU32(col1)
+                );
+            }
+            ImGui::Dummy(ImVec2(barWidth, barHeight + 5));
+
+            ImGui::EndTabItem();
+        }
+
+        if (ImGui::BeginTabItem("Aim")) {
+            ImGui::Text("Здесь будут настройки Aim");
+            ImGui::EndTabItem();
+        }
+
+        if (ImGui::BeginTabItem("Skins")) {
+            ImGui::Text("Здесь будут настройки Skins");
+            ImGui::EndTabItem();
+        }
+
+        if (ImGui::BeginTabItem("Settings")) {
+            ImGui::Text("Общие настройки");
+            ImGui::EndTabItem();
+        }
+
+        ImGui::EndTabBar();
+    }
+
+    ImGui::End();
+    ImGui::PopStyleColor(6);
 }
